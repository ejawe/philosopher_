Partie obligatoire
Gestion d'erreur
Ce projet doit être codé en C, en respectant la Norme.
Tout crash, comportement indéterminé, fuite mémoire ou erreur de norme signifie 0 au projet.


Philo_one code
- Verifiez que le code de philo_one respecte les points suivants et demandez des explications:
- Verifiez qu'il y a un thread par philosophe
- Verifiez qu'il y a une mutex par fourchette, et qu'elle est utilisée pour vérifier la valeur de la fourchette et/ou la changer
- Vérifiez que l'output est protégé contre les accès multiples afin d'éviter un rendu mélangé
- Vérifiez que la mort d'un philosophe est notée et qu'il y a un mutex empêchant le philosophe de mourrir et de commencer a manger exactement au meme moment.


Philo_one test
- Ne testez pas avec plus de 200 philosphes
- Ne testez pas avec time_to_die ou time_to_eat ou time_to_sleep avec une valeur de moins de 60 ms
- Testez avec 5 800 200 200. Personne ne devrait mourir.
- Testez avec 5 800 200 200 7. Personne ne devrait mourir et la simulation devrait s'arreter quand les philosophes ont mangé au moins 7 fois chacun.
- Testez avec 4 410 200 200. Personne ne devrait mourir.
- Testez avec 4 310 200 100. Un philosophe devrait mourir.
- Testez avec 2 philosophes et vérifiez les timings (une mort délayée de plus de 10ms est innacceptable).
- Testez avec vos propres valeurs et vérifiez les règles. Vérifiez que les philosophes meurent au bon moment, qu'ils ne volent pas de fourchette, etc.
./philo_one 199 410 200 200 should died
./philo_one 2 400 200 100 died
./philo_one 2 310 200 200 2
./philo_one 2 310 200 200 3
./philo_one 3 310 200 200 6





Philo_two code
- Verifiez que le code de philo_two respecte les points suivants et demandez des explications:
- Verifiez qu'il y a un thread par philosophe
- Vérifiez qu'il y a un unique semaphore qui représente le nombre de fourchettes
- Vérifiez que l'output est protégé contre les accès multiples afin d'éviter un rendu mélangé
- Vérifiez comment la mort d'un philosophe est vérifiée, et qu'il y a un semaphore empêchant le philosophe de mourrir et de commencer a manger exactement au meme moment.
Philo_two test
- Ne testez pas avec plus de 200 philosphes
- Ne testez pas avec time_to_die ou time_to_eat ou time_to_sleep avec une valeur de moins de 60 ms
- Testez avec 5 800 200 200. Personne ne devrait mourir.
- Testez avec 5 800 200 200 7. Personne ne devrait mourir et la simulation devrait s'arreter quand les philosophes ont mangé au moins 7 fois chacun.
- Testez avec 4 410 200 200. Personne ne devrait mourir.
- Testez avec 4 310 200 100. Un philosophe devrait mourir.
- Testez avec 2 philosophes et vérifiez les timings (une mort délayée de plus de 10ms est innacceptable).
- Testez avec vos propres valeurs et vérifiez les règles. Vérifiez que les philosophes meurent au bon moment, qu'ils ne volent pas de fourchette, etc
./philo_two 5 800 200 200
./philo_two 4 410 200 200
./philo_two 4 310 200 100
./philo_two 199 410 200 200 should died
./philo_two 2 400 200 100 died
./philo_two 2 310 200 200 2
./philo_two 2 310 200 200 3
./philo_two 3 310 200 200 6






Philo_three code
- Verifiez que le code de philo_three respecte les points suivants et demandez des explications:
- Verifiez qu'il y a un process par philosophe et que le process initial les attend tous.
- Vérifiez qu'il y a un unique semaphore qui représente le nombre de fourchettes
- Vérifiez que l'output est protégé contre les accès multiples afin d'éviter un rendu mélangé
- Vérifiez comment la mort d'un philosophe est vérifiée, et qu'il y a un semaphore empêchant le philosophe de mourrir et de commencer a manger exactement au meme moment.
Philo_three test
- Ne testez pas avec plus de 200 philosphes
- Ne testez pas avec time_to_die ou time_to_eat ou time_to_sleep avec une valeur de moins de 60 ms
- Testez avec 5 800 200 200. Personne ne devrait mourir.
- Testez avec 5 800 200 200 7. Personne ne devrait mourir et la simulation devrait s'arreter quand les philosophes ont mangé au moins 7 fois chacun.
- Testez avec 4 410 200 200. Personne ne devrait mourir.
- Testez avec 4 310 200 100. Un philosophe devrait mourir.
- Testez avec 2 philosophes et vérifiez les timings (une mort délayée de plus de 10ms est innacceptable).
- Testez avec vos propres valeurs et vérifiez les règles. Vérifiez que les philosophes meurent au bon moment, qu'ils ne volent pas de fourchette, etc
Ratings

./philo_three 199 410 200 200 should died
./philo_three 2 400 200 100 died
./philo_three 2 310 200 200 2
./philo_three 2 310 200 200 3
./philo_three 3 310 200 200 6